name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Perform a dry run (no actual release)'
        required: false
        default: 'false'
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Lean
      run: |
        curl -sSf https://raw.githubusercontent.com/leanprover/elan/master/elan-init.sh | sh -s -- -y
        echo "$HOME/.elan/bin" >> $GITHUB_PATH

    - name: Setup Lean toolchain
      run: |
        elan install $(cat lean-toolchain)
        elan default $(cat lean-toolchain)

    - name: Update dependencies
      run: lake update

    - name: Build project
      run: lake build --release

    - name: Run tests
      run: lake test

    - name: Test CLI
      run: |
        .lake/build/bin/lean-effects --help
        .lake/build/bin/lean-effects version
        .lake/build/bin/lean-effects validate

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: lean-effects-binary
        path: .lake/build/bin/lean-effects

  docker-release:
    needs: build-and-test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      if: ${{ !inputs.dry_run }}
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract version
      id: version
      run: |
        if [[ $GITHUB_REF == refs/tags/v* ]]; then
          VERSION=${GITHUB_REF#refs/tags/v}
        else
          VERSION=$(date +%Y%m%d-%H%M%S)
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ !inputs.dry_run }}
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}
        labels: |
          org.opencontainers.image.version=${{ steps.version.outputs.version }}
          org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}
          org.opencontainers.image.revision=${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker image
      run: |
        docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }} --help
        docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }} validate

  create-release:
    needs: [build-and-test, docker-release]
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: lean-effects-binary
        path: ./artifacts

    - name: Create release assets
      run: |
        mkdir -p release
        cp artifacts/lean-effects release/
        cp README.md release/
        cp LICENSE release/ 2>/dev/null || echo "No LICENSE file"
        tar -czf release/lean-effects-${{ github.ref_name }}-linux-x64.tar.gz -C release lean-effects README.md
        
        # Create checksums
        cd release
        sha256sum * > checksums.txt

    - name: Extract release notes
      id: release_notes
      run: |
        if [[ -f CHANGELOG.md ]]; then
          # Extract notes for this version from CHANGELOG.md
          awk '/^## \[.*\]/{if(found) exit; if(/\[${{ github.ref_name }}\]/) found=1; next} found' CHANGELOG.md > release_notes.txt
        else
          echo "Release ${{ github.ref_name }}" > release_notes.txt
          echo "" >> release_notes.txt
          echo "## What's Changed" >> release_notes.txt
          echo "- Docker image: \`ghcr.io/${{ github.repository }}:${{ github.ref_name }}\`" >> release_notes.txt
          echo "- Binary available for download below" >> release_notes.txt
        fi

    - name: Create GitHub Release
      if: ${{ !inputs.dry_run }}
      uses: softprops/action-gh-release@v1
      with:
        files: |
          release/lean-effects-${{ github.ref_name }}-linux-x64.tar.gz
          release/checksums.txt
        body_path: release_notes.txt
        draft: false
        prerelease: ${{ contains(github.ref_name, '-') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Dry run summary
      if: ${{ inputs.dry_run }}
      run: |
        echo "## Dry Run Summary" >> $GITHUB_STEP_SUMMARY
        echo "Would create release: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "Would publish Docker image: ghcr.io/${{ github.repository }}:${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "Release assets prepared:" >> $GITHUB_STEP_SUMMARY
        ls -la release/ >> $GITHUB_STEP_SUMMARY
